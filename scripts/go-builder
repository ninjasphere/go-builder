#!/usr/bin/env bash

GO_BUILDER_IMAGE=${GO_BUILDER_IMAGE:-ninjasphere/go-builder}

die() {
	echo "$*" 1>&2
	exit 1
}

usage() {
	cat <<EOF
go-builder {command} {args...}

{command} is run within a docker container based on ${GO_BUILDER_IMAGE} with the arguments specified.

- /data/go/src is mapped to ${GOPATH}/src
- /data/go/bin/${GOOS}_${GOARCH} is mapped to ${GOPATH}/bin/${GOOS}_${GOARCH}
- the working directory is set to /data/go${PWD#${GOPATH}}.

golang, make, docker are all available within the container.
EOF
}

cmd=${1:-usage}
shift 1

case "$cmd" in
	usage)
		$cmd "$@"
	;;
	*)
		test -n "$GOPATH" || die "usage: GOPATH must be set up in host environment."
		if test "${PWD#${GOPATH}}" = "${PWD}"; then
			die "$(pwd) is not within ${GOPATH} - cannot execute"
		fi
		GOOS=${GOOS:-linux}
		GOARCH=${GOARCH:-amd64}
		mkdir -p ${GOPATH}/bin/${GOOS}_${GOARCH}
		docker run \
			--rm \
			-it \
			-e GOOS=${GOOS:-linux} \
			-e GOARCH=${GOARCH:-amd64} \
			-e SRC=${PWD#${GOPATH}} \
			-v /var/run/docker.sock:/var/run/docker.sock \
			-v ${GOPATH}/bin/${GOOS}_${GOARCH}:/data/go/bin \
			-v ${GOPATH}/src:/data/go/src \
			-v ${PWD}:/data/src \
			${GO_BUILDER_IMAGE} \
			"$cmd" "$@"
	;;
esac
